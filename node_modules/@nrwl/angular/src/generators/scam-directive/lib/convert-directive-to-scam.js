"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertDirectiveToScam = void 0;
const devkit_1 = require("@nrwl/devkit");
const ensure_typescript_1 = require("@nrwl/js/src/utils/typescript/ensure-typescript");
const js_1 = require("@nrwl/js");
let tsModule;
function convertDirectiveToScam(tree, directiveFileInfo, options) {
    if (!tree.exists(directiveFileInfo.filePath)) {
        throw new Error(`Couldn't find directive at path ${directiveFileInfo.filePath} to add SCAM setup.`);
    }
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const directiveNames = (0, devkit_1.names)(options.name);
    const typeNames = (0, devkit_1.names)('directive');
    const directiveClassName = `${directiveNames.className}${typeNames.className}`;
    if (options.inlineScam) {
        const currentDirectiveContents = tree.read(directiveFileInfo.filePath, 'utf-8');
        let source = tsModule.createSourceFile(directiveFileInfo.filePath, currentDirectiveContents, tsModule.ScriptTarget.Latest, true);
        source = (0, js_1.insertImport)(tree, source, directiveFileInfo.filePath, 'NgModule', '@angular/core');
        source = (0, js_1.insertImport)(tree, source, directiveFileInfo.filePath, 'CommonModule', '@angular/common');
        let updatedDirectiveSource = source.getText();
        updatedDirectiveSource = `${updatedDirectiveSource}${getNgModuleDeclaration(directiveClassName)}`;
        tree.write(directiveFileInfo.filePath, updatedDirectiveSource);
        return;
    }
    const scamFilePath = (0, devkit_1.joinPathFragments)(directiveFileInfo.directory, `${directiveNames.fileName}.module.ts`);
    tree.write(scamFilePath, getModuleFileContent(directiveClassName, directiveFileInfo.fileName));
}
exports.convertDirectiveToScam = convertDirectiveToScam;
function getModuleFileContent(directiveClassName, directiveFileName) {
    return `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ${directiveClassName} } from './${directiveFileName}';
${getNgModuleDeclaration(directiveClassName)}`;
}
function getNgModuleDeclaration(directiveClassName) {
    return `
@NgModule({
  imports: [CommonModule],
  declarations: [${directiveClassName}],
  exports: [${directiveClassName}],
})
export class ${directiveClassName}Module {}`;
}
//# sourceMappingURL=convert-directive-to-scam.js.map