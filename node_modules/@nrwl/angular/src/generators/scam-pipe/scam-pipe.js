"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scamPipeGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const export_scam_1 = require("../utils/export-scam");
const file_info_1 = require("../utils/file-info");
const path_1 = require("../utils/path");
const lib_1 = require("./lib");
const pipe_1 = require("../pipe/pipe");
function scamPipeGenerator(tree, rawOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, lib_1.normalizeOptions)(tree, rawOptions);
        const { inlineScam, projectSourceRoot } = options, pipeOptions = tslib_1.__rest(options, ["inlineScam", "projectSourceRoot"]);
        checkPathUnderProjectRoot(tree, options);
        yield (0, pipe_1.pipeGenerator)(tree, Object.assign(Object.assign({}, pipeOptions), { skipImport: true, export: false, standalone: false, skipFormat: true }));
        const pipeFileInfo = (0, file_info_1.getPipeFileInfo)(tree, options);
        (0, lib_1.convertPipeToScam)(tree, pipeFileInfo, options);
        (0, export_scam_1.exportScam)(tree, pipeFileInfo, options);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.scamPipeGenerator = scamPipeGenerator;
function checkPathUnderProjectRoot(tree, options) {
    if (!options.path) {
        return;
    }
    const { root } = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    let pathToPipe = (0, devkit_1.normalizePath)(options.path);
    pathToPipe = pathToPipe.startsWith('/') ? pathToPipe.slice(1) : pathToPipe;
    if (!(0, path_1.pathStartsWith)(pathToPipe, root)) {
        throw new Error(`The path provided for the SCAM (${options.path}) does not exist under the project root (${root}).`);
    }
}
exports.default = scamPipeGenerator;
//# sourceMappingURL=scam-pipe.js.map