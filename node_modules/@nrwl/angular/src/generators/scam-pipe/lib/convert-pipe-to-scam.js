"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPipeToScam = void 0;
const devkit_1 = require("@nrwl/devkit");
const ensure_typescript_1 = require("@nrwl/js/src/utils/typescript/ensure-typescript");
const js_1 = require("@nrwl/js");
let tsModule;
function convertPipeToScam(tree, pipeFileInfo, options) {
    if (!tree.exists(pipeFileInfo.filePath)) {
        throw new Error(`Couldn't find pipe at path ${pipeFileInfo.filePath} to add SCAM setup.`);
    }
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const pipeNames = (0, devkit_1.names)(options.name);
    const typeNames = (0, devkit_1.names)('pipe');
    const pipeClassName = `${pipeNames.className}${typeNames.className}`;
    if (options.inlineScam) {
        const currentPipeContents = tree.read(pipeFileInfo.filePath, 'utf-8');
        let source = tsModule.createSourceFile(pipeFileInfo.filePath, currentPipeContents, tsModule.ScriptTarget.Latest, true);
        source = (0, js_1.insertImport)(tree, source, pipeFileInfo.filePath, 'NgModule', '@angular/core');
        source = (0, js_1.insertImport)(tree, source, pipeFileInfo.filePath, 'CommonModule', '@angular/common');
        let updatedPipeSource = source.getText();
        updatedPipeSource = `${updatedPipeSource}${getNgModuleDeclaration(pipeClassName)}`;
        tree.write(pipeFileInfo.filePath, updatedPipeSource);
        return;
    }
    const scamFilePath = (0, devkit_1.joinPathFragments)(pipeFileInfo.directory, `${pipeNames.fileName}.module.ts`);
    tree.write(scamFilePath, getModuleFileContent(pipeClassName, pipeFileInfo.fileName));
}
exports.convertPipeToScam = convertPipeToScam;
function getModuleFileContent(pipeClassName, pipeFileName) {
    return `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ${pipeClassName} } from './${pipeFileName}';
${getNgModuleDeclaration(pipeClassName)}`;
}
function getNgModuleDeclaration(pipeClassName) {
    return `
@NgModule({
  imports: [CommonModule],
  declarations: [${pipeClassName}],
  exports: [${pipeClassName}],
})
export class ${pipeClassName}Module {}`;
}
//# sourceMappingURL=convert-pipe-to-scam.js.map