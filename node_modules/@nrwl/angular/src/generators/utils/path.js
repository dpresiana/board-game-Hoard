"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPathUnderProjectRoot = exports.getRelativeImportToFile = exports.pathStartsWith = void 0;
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
function pathStartsWith(path1, path2) {
    const normalizedPath1 = (0, devkit_1.joinPathFragments)(devkit_1.workspaceRoot, path1);
    const normalizedPath2 = (0, devkit_1.joinPathFragments)(devkit_1.workspaceRoot, path2);
    return normalizedPath1.startsWith(normalizedPath2);
}
exports.pathStartsWith = pathStartsWith;
function getRelativeImportToFile(sourceFilePath, targetFilePath) {
    const relativeDirToTarget = (0, path_1.relative)((0, path_1.dirname)(sourceFilePath), (0, path_1.dirname)(targetFilePath));
    return `./${(0, devkit_1.joinPathFragments)(relativeDirToTarget, (0, path_1.basename)(targetFilePath, '.ts'))}`;
}
exports.getRelativeImportToFile = getRelativeImportToFile;
function checkPathUnderProjectRoot(tree, projectName, path) {
    if (!path) {
        return;
    }
    const { root } = (0, devkit_1.readProjectConfiguration)(tree, projectName);
    let pathToComponent = (0, devkit_1.normalizePath)(path);
    pathToComponent = pathToComponent.startsWith('/')
        ? pathToComponent.slice(1)
        : pathToComponent;
    if (!pathStartsWith(pathToComponent, root)) {
        throw new Error(`The path provided (${path}) does not exist under the project root (${root}). ` +
            `Please make sure to provide a path that exists under the project root.`);
    }
}
exports.checkPathUnderProjectRoot = checkPathUnderProjectRoot;
//# sourceMappingURL=path.js.map