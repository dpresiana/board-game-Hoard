"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const semver_1 = require("semver");
const path_1 = require("../utils/path");
const version_utils_1 = require("../utils/version-utils");
const component_1 = require("./lib/component");
const normalize_options_1 = require("./lib/normalize-options");
const utils_1 = require("../utils");
const module_1 = require("./lib/module");
function componentGenerator(tree, rawOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const installedAngularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
        if ((0, semver_1.lt)(installedAngularVersionInfo.version, '14.1.0') &&
            rawOptions.standalone) {
            throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
        }
        const options = yield (0, normalize_options_1.normalizeOptions)(tree, rawOptions);
        (0, path_1.checkPathUnderProjectRoot)(tree, options.project, options.path);
        const pathToGenerate = options.flat
            ? (0, devkit_1.joinPathFragments)(__dirname, './files/__fileName__')
            : (0, devkit_1.joinPathFragments)(__dirname, './files');
        const componentNames = (0, devkit_1.names)(options.name);
        const typeNames = (0, devkit_1.names)(options.type);
        const selector = options.selector ||
            buildSelector(tree, componentNames.fileName, options.prefix);
        (0, devkit_1.generateFiles)(tree, pathToGenerate, options.path, {
            fileName: componentNames.fileName,
            className: componentNames.className,
            type: typeNames.fileName,
            typeClassName: typeNames.className,
            style: options.style,
            inlineStyle: options.inlineStyle,
            inlineTemplate: options.inlineTemplate,
            standalone: options.standalone,
            skipSelector: options.skipSelector,
            changeDetection: options.changeDetection,
            viewEncapsulation: options.viewEncapsulation,
            displayBlock: options.displayBlock,
            selector,
            tpl: '',
        });
        if (options.skipTests) {
            const pathToSpecFile = (0, devkit_1.joinPathFragments)(options.path, `${!options.flat ? `${componentNames.fileName}/` : ``}${componentNames.fileName}.${typeNames.fileName}.spec.ts`);
            tree.delete(pathToSpecFile);
        }
        if (options.inlineTemplate) {
            const pathToTemplateFile = (0, devkit_1.joinPathFragments)(options.path, `${!options.flat ? `${componentNames.fileName}/` : ``}${componentNames.fileName}.${typeNames.fileName}.html`);
            tree.delete(pathToTemplateFile);
        }
        if (options.inlineStyle) {
            const pathToStyleFile = (0, devkit_1.joinPathFragments)(options.path, `${!options.flat ? `${componentNames.fileName}/` : ``}${componentNames.fileName}.${typeNames.fileName}.${options.style}`);
            tree.delete(pathToStyleFile);
        }
        if (!options.skipImport && !options.standalone) {
            const modulePath = (0, module_1.findModuleFromOptions)(tree, options, options.projectRoot);
            (0, utils_1.addToNgModule)(tree, options.path, modulePath, componentNames.fileName, `${componentNames.className}${typeNames.className}`, options.flat
                ? `${componentNames.fileName}.${typeNames.fileName}`
                : (0, devkit_1.joinPathFragments)(componentNames.fileName, `${componentNames.fileName}.${typeNames.fileName}`), 'declarations', options.flat, options.export);
        }
        (0, component_1.exportComponentInEntryPoint)(tree, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.componentGenerator = componentGenerator;
function buildSelector(tree, name, prefix) {
    var _a;
    const selectorPrefix = (0, devkit_1.names)((_a = prefix !== null && prefix !== void 0 ? prefix : (0, devkit_1.readNxJson)(tree).npmScope) !== null && _a !== void 0 ? _a : 'app').fileName;
    return (0, devkit_1.names)(`${selectorPrefix}-${name}`).fileName;
}
exports.default = componentGenerator;
//# sourceMappingURL=component.js.map